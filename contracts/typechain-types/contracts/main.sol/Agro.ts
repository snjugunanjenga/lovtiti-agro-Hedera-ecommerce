/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Agro {
  export type ProductStruct = {
    price: BigNumberish;
    owner: AddressLike;
    stock: BigNumberish;
    id: BigNumberish;
  };

  export type ProductStructOutput = [
    price: bigint,
    owner: string,
    stock: bigint,
    id: bigint
  ] & { price: bigint; owner: string; stock: bigint; id: bigint };

  export type FarmerstructStruct = {
    products: BigNumberish[];
    balance: BigNumberish;
    exists: boolean;
  };

  export type FarmerstructStructOutput = [
    products: bigint[],
    balance: bigint,
    exists: boolean
  ] & { products: bigint[]; balance: bigint; exists: boolean };
}

export interface AgroInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addProduct"
      | "buyproduct"
      | "createFarmer"
      | "farmer"
      | "increasePrice"
      | "owner"
      | "products"
      | "registerFarmer"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateStock"
      | "viewProducts"
      | "whoFarmer"
      | "withdrawBalance"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "farmerEarnt"
      | "farmerJoined"
      | "priceIncreased"
      | "productBought"
      | "productCreated"
      | "stockUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addProduct",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyproduct",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createFarmer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "farmer", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "increasePrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "products",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerFarmer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStock",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "viewProducts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whoFarmer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBalance",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addProduct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyproduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createFarmer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "farmer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increasePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "products", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerFarmer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewProducts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whoFarmer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBalance",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace farmerEarntEvent {
  export type InputTuple = [
    amount: BigNumberish,
    farmer: AddressLike,
    txid: BigNumberish
  ];
  export type OutputTuple = [amount: bigint, farmer: string, txid: bigint];
  export interface OutputObject {
    amount: bigint;
    farmer: string;
    txid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace farmerJoinedEvent {
  export type InputTuple = [farmer: AddressLike];
  export type OutputTuple = [farmer: string];
  export interface OutputObject {
    farmer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace priceIncreasedEvent {
  export type InputTuple = [price: BigNumberish, pid: BigNumberish];
  export type OutputTuple = [price: bigint, pid: bigint];
  export interface OutputObject {
    price: bigint;
    pid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace productBoughtEvent {
  export type InputTuple = [
    productId: BigNumberish,
    buyer: AddressLike,
    farmer: AddressLike,
    amount: BigNumberish,
    txid: BigNumberish
  ];
  export type OutputTuple = [
    productId: bigint,
    buyer: string,
    farmer: string,
    amount: bigint,
    txid: bigint
  ];
  export interface OutputObject {
    productId: bigint;
    buyer: string;
    farmer: string;
    amount: bigint;
    txid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace productCreatedEvent {
  export type InputTuple = [
    productId: BigNumberish,
    price: BigNumberish,
    farmer: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    productId: bigint,
    price: bigint,
    farmer: string,
    amount: bigint
  ];
  export interface OutputObject {
    productId: bigint;
    price: bigint;
    farmer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace stockUpdatedEvent {
  export type InputTuple = [amount: BigNumberish, pid: BigNumberish];
  export type OutputTuple = [amount: bigint, pid: bigint];
  export interface OutputObject {
    amount: bigint;
    pid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Agro extends BaseContract {
  connect(runner?: ContractRunner | null): Agro;
  waitForDeployment(): Promise<this>;

  interface: AgroInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addProduct: TypedContractMethod<
    [price: BigNumberish, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  buyproduct: TypedContractMethod<
    [pid: BigNumberish, amount: BigNumberish],
    [bigint],
    "payable"
  >;

  createFarmer: TypedContractMethod<[], [void], "nonpayable">;

  farmer: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, boolean] & { balance: bigint; exists: boolean }],
    "view"
  >;

  increasePrice: TypedContractMethod<
    [price: BigNumberish, pid: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  products: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint] & {
        price: bigint;
        owner: string;
        stock: bigint;
        id: bigint;
      }
    ],
    "view"
  >;

  registerFarmer: TypedContractMethod<
    [farmerAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateStock: TypedContractMethod<
    [stock: BigNumberish, pid: BigNumberish],
    [void],
    "nonpayable"
  >;

  viewProducts: TypedContractMethod<
    [_farmer: AddressLike],
    [Agro.ProductStructOutput[]],
    "view"
  >;

  whoFarmer: TypedContractMethod<
    [user: AddressLike],
    [Agro.FarmerstructStructOutput],
    "view"
  >;

  withdrawBalance: TypedContractMethod<[], [bigint], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addProduct"
  ): TypedContractMethod<
    [price: BigNumberish, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buyproduct"
  ): TypedContractMethod<
    [pid: BigNumberish, amount: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createFarmer"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "farmer"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, boolean] & { balance: bigint; exists: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "increasePrice"
  ): TypedContractMethod<
    [price: BigNumberish, pid: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "products"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint] & {
        price: bigint;
        owner: string;
        stock: bigint;
        id: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerFarmer"
  ): TypedContractMethod<[farmerAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateStock"
  ): TypedContractMethod<
    [stock: BigNumberish, pid: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "viewProducts"
  ): TypedContractMethod<
    [_farmer: AddressLike],
    [Agro.ProductStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "whoFarmer"
  ): TypedContractMethod<
    [user: AddressLike],
    [Agro.FarmerstructStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawBalance"
  ): TypedContractMethod<[], [bigint], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "farmerEarnt"
  ): TypedContractEvent<
    farmerEarntEvent.InputTuple,
    farmerEarntEvent.OutputTuple,
    farmerEarntEvent.OutputObject
  >;
  getEvent(
    key: "farmerJoined"
  ): TypedContractEvent<
    farmerJoinedEvent.InputTuple,
    farmerJoinedEvent.OutputTuple,
    farmerJoinedEvent.OutputObject
  >;
  getEvent(
    key: "priceIncreased"
  ): TypedContractEvent<
    priceIncreasedEvent.InputTuple,
    priceIncreasedEvent.OutputTuple,
    priceIncreasedEvent.OutputObject
  >;
  getEvent(
    key: "productBought"
  ): TypedContractEvent<
    productBoughtEvent.InputTuple,
    productBoughtEvent.OutputTuple,
    productBoughtEvent.OutputObject
  >;
  getEvent(
    key: "productCreated"
  ): TypedContractEvent<
    productCreatedEvent.InputTuple,
    productCreatedEvent.OutputTuple,
    productCreatedEvent.OutputObject
  >;
  getEvent(
    key: "stockUpdated"
  ): TypedContractEvent<
    stockUpdatedEvent.InputTuple,
    stockUpdatedEvent.OutputTuple,
    stockUpdatedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "farmerEarnt(uint256,address,uint256)": TypedContractEvent<
      farmerEarntEvent.InputTuple,
      farmerEarntEvent.OutputTuple,
      farmerEarntEvent.OutputObject
    >;
    farmerEarnt: TypedContractEvent<
      farmerEarntEvent.InputTuple,
      farmerEarntEvent.OutputTuple,
      farmerEarntEvent.OutputObject
    >;

    "farmerJoined(address)": TypedContractEvent<
      farmerJoinedEvent.InputTuple,
      farmerJoinedEvent.OutputTuple,
      farmerJoinedEvent.OutputObject
    >;
    farmerJoined: TypedContractEvent<
      farmerJoinedEvent.InputTuple,
      farmerJoinedEvent.OutputTuple,
      farmerJoinedEvent.OutputObject
    >;

    "priceIncreased(uint256,uint256)": TypedContractEvent<
      priceIncreasedEvent.InputTuple,
      priceIncreasedEvent.OutputTuple,
      priceIncreasedEvent.OutputObject
    >;
    priceIncreased: TypedContractEvent<
      priceIncreasedEvent.InputTuple,
      priceIncreasedEvent.OutputTuple,
      priceIncreasedEvent.OutputObject
    >;

    "productBought(uint256,address,address,uint256,uint256)": TypedContractEvent<
      productBoughtEvent.InputTuple,
      productBoughtEvent.OutputTuple,
      productBoughtEvent.OutputObject
    >;
    productBought: TypedContractEvent<
      productBoughtEvent.InputTuple,
      productBoughtEvent.OutputTuple,
      productBoughtEvent.OutputObject
    >;

    "productCreated(uint256,uint256,address,uint256)": TypedContractEvent<
      productCreatedEvent.InputTuple,
      productCreatedEvent.OutputTuple,
      productCreatedEvent.OutputObject
    >;
    productCreated: TypedContractEvent<
      productCreatedEvent.InputTuple,
      productCreatedEvent.OutputTuple,
      productCreatedEvent.OutputObject
    >;

    "stockUpdated(uint256,uint256)": TypedContractEvent<
      stockUpdatedEvent.InputTuple,
      stockUpdatedEvent.OutputTuple,
      stockUpdatedEvent.OutputObject
    >;
    stockUpdated: TypedContractEvent<
      stockUpdatedEvent.InputTuple,
      stockUpdatedEvent.OutputTuple,
      stockUpdatedEvent.OutputObject
    >;
  };
}
