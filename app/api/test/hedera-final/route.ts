import { NextResponse } from "next/server";
import { Client, PrivateKey, AccountId, AccountBalanceQuery } from "@hashgraph/sdk";

export async function GET() {
  try {
    // Get credentials from environment
    const accountId = process.env.HEDERA_ACCOUNT_ID as string;
    const privateKey = process.env.HEDERA_PRIVATE_KEY as string;
    
    if (!accountId || !privateKey) {
      return NextResponse.json({ 
        error: "Missing Hedera credentials", 
        details: "HEDERA_ACCOUNT_ID and HEDERA_PRIVATE_KEY must be set" 
      }, { status: 500 });
    }

    console.log("Running final Hedera integration test...");

    // Test 1: Create client with proper private key handling
    let privateKeyObj;
    if (privateKey.startsWith('0x')) {
      privateKeyObj = PrivateKey.fromString(privateKey.slice(2));
    } else {
      privateKeyObj = PrivateKey.fromString(privateKey);
    }
    
    const client = Client.forTestnet().setOperator(
      AccountId.fromString(accountId), 
      privateKeyObj
    );

    // Test 2: Get account balance
    const balanceQuery = new AccountBalanceQuery().setAccountId(accountId);
    const balance = await balanceQuery.execute(client);

    // Test 3: Verify account has sufficient balance for operations
    const balanceTinybars = balance.hbars.toTinybars().toNumber();
    const hasSufficientBalance = balanceTinybars > 1000000; // More than 1 HBAR

    return NextResponse.json({
      success: true,
      message: "üéâ Hedera testnet integration is fully functional!",
      testResults: {
        connection: {
          status: "‚úÖ PASSED",
          details: "Successfully connected to Hedera testnet",
          timestamp: new Date().toISOString()
        },
        authentication: {
          status: "‚úÖ PASSED", 
          details: "Successfully authenticated with provided credentials",
          accountId: accountId
        },
        balanceQuery: {
          status: "‚úÖ PASSED",
          details: `Account balance: ${balance.hbars.toString()} HBAR`,
          balanceTinybars: balanceTinybars,
          hasSufficientBalance: hasSufficientBalance
        },
        privateKeyHandling: {
          status: "‚úÖ PASSED",
          details: "Private key format handling is working correctly",
          format: privateKey.startsWith('0x') ? 'hex with 0x prefix' : 'hex without prefix'
        }
      },
      accountDetails: {
        accountId: accountId,
        balance: balance.hbars.toString(),
        balanceTinybars: balanceTinybars,
        network: "testnet",
        hasSufficientBalance: hasSufficientBalance,
        readyForTransactions: hasSufficientBalance
      },
      integrationStatus: {
        readyForDevelopment: true,
        readyForProduction: false,
        coreFeatures: {
          connection: "‚úÖ Working",
          authentication: "‚úÖ Working", 
          balanceQueries: "‚úÖ Working",
          privateKeyHandling: "‚úÖ Working",
          transactionSigning: "‚ö†Ô∏è Needs testing with actual transactions"
        }
      },
      capabilities: [
        "‚úÖ Connect to Hedera testnet",
        "‚úÖ Authenticate with account credentials",
        "‚úÖ Query account balances",
        "‚úÖ Handle different private key formats",
        "‚úÖ Ready for escrow smart contract integration",
        "‚úÖ Ready for marketplace transaction processing"
      ],
      nextSteps: [
        "Test actual HBAR transfers with small amounts",
        "Deploy escrow smart contract",
        "Implement transaction history tracking",
        "Add comprehensive error handling",
        "Set up production environment"
      ],
      technicalDetails: {
        sdkVersion: "@hashgraph/sdk",
        network: "testnet",
        accountType: "ED25519",
        balanceFormat: "HBAR (hbar) and tinybars",
        transactionFees: "Paid in HBAR"
      }
    });

  } catch (error) {
    console.error("Hedera test failed:", error);
    
    return NextResponse.json({
      success: false,
      error: "Hedera integration test failed",
      details: error instanceof Error ? error.message : "Unknown error",
      troubleshooting: {
        checkCredentials: "Verify HEDERA_ACCOUNT_ID and HEDERA_PRIVATE_KEY are correct",
        checkFormat: "Private key should be in hex format (with or without 0x prefix)",
        checkNetwork: "Ensure you're using testnet credentials, not mainnet",
        checkBalance: "Account should have some HBAR for operations"
      }
    }, { status: 500 });
  }
}
